/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { ChatCreationResponse } from '../models/chat-creation-response';
import { ChatResponse } from '../models/chat-response';
import { createChat } from '../fn/chats-controller/create-chat';
import { CreateChat$Params } from '../fn/chats-controller/create-chat';
import { createGroupChat } from '../fn/chats-controller/create-group-chat';
import { CreateGroupChat$Params } from '../fn/chats-controller/create-group-chat';
import { deleteGroupChat } from '../fn/chats-controller/delete-group-chat';
import { DeleteGroupChat$Params } from '../fn/chats-controller/delete-group-chat';
import { getChatDetails } from '../fn/chats-controller/get-chat-details';
import { GetChatDetails$Params } from '../fn/chats-controller/get-chat-details';
import { getChatsByUser } from '../fn/chats-controller/get-chats-by-user';
import { GetChatsByUser$Params } from '../fn/chats-controller/get-chats-by-user';
import { StringResponse } from '../models/string-response';
import { updateGroupChat } from '../fn/chats-controller/update-group-chat';
import { UpdateGroupChat$Params } from '../fn/chats-controller/update-group-chat';


/**
 * CRUD Rest APIs for managing chats
 */
@Injectable({ providedIn: 'root' })
export class ChatsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getChatsByUser()` */
  static readonly GetChatsByUserPath = '/api/v1/chats';

  /**
   * Retrieve my chats.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatsByUser$Response(params?: GetChatsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatResponse>;
}>> {
    return getChatsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve my chats.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatsByUser(params?: GetChatsByUser$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatResponse>;
}> {
    return this.getChatsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatResponse>;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatResponse>;
} => r.body)
    );
  }

  /** Path part for operation `createChat()` */
  static readonly CreateChatPath = '/api/v1/chats';

  /**
   * Create a new 1-to-1 chat.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createChat()` instead.
   *
   * This method doesn't expect any request body.
   */
  createChat$Response(params: CreateChat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
}>> {
    return createChat(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new 1-to-1 chat.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createChat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createChat(params: CreateChat$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
}> {
    return this.createChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
} => r.body)
    );
  }

  /** Path part for operation `createGroupChat()` */
  static readonly CreateGroupChatPath = '/api/v1/chats/group';

  /**
   * Create a new group chat.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createGroupChat()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createGroupChat$Response(params?: CreateGroupChat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatCreationResponse;
}>> {
    return createGroupChat(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new group chat.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createGroupChat$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createGroupChat(params?: CreateGroupChat$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatCreationResponse;
}> {
    return this.createGroupChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatCreationResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatCreationResponse;
} => r.body)
    );
  }

  /** Path part for operation `updateGroupChat()` */
  static readonly UpdateGroupChatPath = '/api/v1/chats/{chat-id}/update';

  /**
   * Update an existing chat.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateGroupChat()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateGroupChat$Response(params: UpdateGroupChat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return updateGroupChat(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing chat.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateGroupChat$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateGroupChat(params: UpdateGroupChat$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.updateGroupChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `getChatDetails()` */
  static readonly GetChatDetailsPath = '/api/v1/chats/{chat-id}';

  /**
   * Retrieve chat details by chatId.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatDetails$Response(params: GetChatDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatResponse;
}>> {
    return getChatDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve chat details by chatId.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatDetails(params: GetChatDetails$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatResponse;
}> {
    return this.getChatDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatResponse;
} => r.body)
    );
  }

  /** Path part for operation `deleteGroupChat()` */
  static readonly DeleteGroupChatPath = '/api/v1/chats/{chat-id}';

  /**
   * Delete an existing chat.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteGroupChat()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGroupChat$Response(params: DeleteGroupChat$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return deleteGroupChat(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete an existing chat.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteGroupChat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGroupChat(params: DeleteGroupChat$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.deleteGroupChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

}
