/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { getStarredMessages } from '../fn/starred-messages-controller/get-starred-messages';
import { GetStarredMessages$Params } from '../fn/starred-messages-controller/get-starred-messages';
import { starMessage } from '../fn/starred-messages-controller/star-message';
import { StarMessage$Params } from '../fn/starred-messages-controller/star-message';
import { StarredMessageResponse } from '../models/starred-message-response';
import { unstarMessage } from '../fn/starred-messages-controller/unstar-message';
import { UnstarMessage$Params } from '../fn/starred-messages-controller/unstar-message';


/**
 * CRUD Rest APIs for managing starred messages
 */
@Injectable({ providedIn: 'root' })
export class StarredMessagesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `unstarMessage()` */
  static readonly UnstarMessagePath = '/api/v1/starred-messages/{message-id}/unstar-message';

  /**
   * Unstar an existing message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unstarMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  unstarMessage$Response(params: UnstarMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return unstarMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Unstar an existing message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unstarMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unstarMessage(params: UnstarMessage$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.unstarMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `starMessage()` */
  static readonly StarMessagePath = '/api/v1/starred-messages/{message-id}/star-message';

  /**
   * Star an existing message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `starMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  starMessage$Response(params: StarMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return starMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Star an existing message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `starMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  starMessage(params: StarMessage$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.starMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `getStarredMessages()` */
  static readonly GetStarredMessagesPath = '/api/v1/starred-messages';

  /**
   * Retrieve paginated starred messages.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStarredMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStarredMessages$Response(params: GetStarredMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<StarredMessageResponse>;
}>> {
    return getStarredMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve paginated starred messages.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStarredMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStarredMessages(params: GetStarredMessages$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<StarredMessageResponse>;
}> {
    return this.getStarredMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<StarredMessageResponse>;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<StarredMessageResponse>;
} => r.body)
    );
  }

}
