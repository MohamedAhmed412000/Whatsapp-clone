/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { ChatMessageResponse } from '../models/chat-message-response';
import { deleteMessage } from '../fn/messages-controller/delete-message';
import { DeleteMessage$Params } from '../fn/messages-controller/delete-message';
import { editMessage } from '../fn/messages-controller/edit-message';
import { EditMessage$Params } from '../fn/messages-controller/edit-message';
import { getChatMessages } from '../fn/messages-controller/get-chat-messages';
import { GetChatMessages$Params } from '../fn/messages-controller/get-chat-messages';
import { MessageCreationResponse } from '../models/message-creation-response';
import { saveMessage } from '../fn/messages-controller/save-message';
import { SaveMessage$Params } from '../fn/messages-controller/save-message';


/**
 * CRUD Rest APIs for managing messages
 */
@Injectable({ providedIn: 'root' })
export class MessagesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveMessage()` */
  static readonly SaveMessagePath = '/api/v1/messages';

  /**
   * Create a message in chat.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveMessage()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  saveMessage$Response(params?: SaveMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: MessageCreationResponse;
}>> {
    return saveMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a message in chat.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveMessage$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  saveMessage(params?: SaveMessage$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: MessageCreationResponse;
}> {
    return this.saveMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: MessageCreationResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: MessageCreationResponse;
} => r.body)
    );
  }

  /** Path part for operation `deleteMessage()` */
  static readonly DeleteMessagePath = '/api/v1/messages/{message-id}';

  /**
   * Delete an existing chat message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMessage$Response(params: DeleteMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return deleteMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete an existing chat message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMessage(params: DeleteMessage$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.deleteMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `editMessage()` */
  static readonly EditMessagePath = '/api/v1/messages/{message-id}';

  /**
   * Edit an existing chat message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editMessage$Response(params: EditMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return editMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Edit an existing chat message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editMessage(params: EditMessage$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.editMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `getChatMessages()` */
  static readonly GetChatMessagesPath = '/api/v1/messages/chat/{chatId}';

  /**
   * Retrieve chat messages.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatMessages$Response(params: GetChatMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatMessageResponse;
}>> {
    return getChatMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve chat messages.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatMessages(params: GetChatMessages$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatMessageResponse;
}> {
    return this.getChatMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatMessageResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: ChatMessageResponse;
} => r.body)
    );
  }

}
