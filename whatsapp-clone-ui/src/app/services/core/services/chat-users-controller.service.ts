/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { ChatUserResponse } from '../models/chat-user-response';
import { getChatUsers } from '../fn/chat-users-controller/get-chat-users';
import { GetChatUsers$Params } from '../fn/chat-users-controller/get-chat-users';
import { getChatUsers1 } from '../fn/chat-users-controller/get-chat-users-1';
import { GetChatUsers1$Params } from '../fn/chat-users-controller/get-chat-users-1';
import { updateGroupChatUsers } from '../fn/chat-users-controller/update-group-chat-users';
import { UpdateGroupChatUsers$Params } from '../fn/chat-users-controller/update-group-chat-users';


/**
 * CRUD Rest APIs for managing chat users
 */
@Injectable({ providedIn: 'root' })
export class ChatUsersControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateGroupChatUsers()` */
  static readonly UpdateGroupChatUsersPath = '/api/v1/chats/{chat-id}/update-users';

  /**
   * Update an existing chat users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateGroupChatUsers()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGroupChatUsers$Response(params: UpdateGroupChatUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return updateGroupChatUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Update an existing chat users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateGroupChatUsers$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGroupChatUsers(params: UpdateGroupChatUsers$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.updateGroupChatUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `getChatUsers()` */
  static readonly GetChatUsersPath = '/api/v1/chats/{chat-id}/users';

  /**
   * Retrieve all chat users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatUsers$Response(params: GetChatUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatUserResponse>;
}>> {
    return getChatUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve all chat users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatUsers(params: GetChatUsers$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatUserResponse>;
}> {
    return this.getChatUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatUserResponse>;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<ChatUserResponse>;
} => r.body)
    );
  }

  /** Path part for operation `getChatUsers1()` */
  static readonly GetChatUsers1Path = '/api/v1/chats/users';

  /**
   * Retrieve my single chats users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getChatUsers1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatUsers1$Response(params?: GetChatUsers1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<string>;
}>> {
    return getChatUsers1(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve my single chats users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getChatUsers1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getChatUsers1(params?: GetChatUsers1$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<string>;
}> {
    return this.getChatUsers1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<string>;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<string>;
} => r.body)
    );
  }

}
