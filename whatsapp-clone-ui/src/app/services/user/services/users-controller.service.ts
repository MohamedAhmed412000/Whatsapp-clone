/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { getBlockedUsers } from '../fn/users-controller/get-blocked-users';
import { GetBlockedUsers$Params } from '../fn/users-controller/get-blocked-users';
import { getUser } from '../fn/users-controller/get-user';
import { GetUser$Params } from '../fn/users-controller/get-user';
import { getUsers } from '../fn/users-controller/get-users';
import { GetUsers$Params } from '../fn/users-controller/get-users';
import { updateUser } from '../fn/users-controller/update-user';
import { UpdateUser$Params } from '../fn/users-controller/update-user';
import { UserResponse } from '../models/user-response';


/**
 * CRUD Rest APIs for managing users
 */
@Injectable({ providedIn: 'root' })
export class UsersControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getUser()` */
  static readonly GetUserPath = '/api/v1/users/me';

  /**
   * Retrieve my user details.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser$Response(params?: GetUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: UserResponse;
}>> {
    return getUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve my user details.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser(params?: GetUser$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: UserResponse;
}> {
    return this.getUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: UserResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: UserResponse;
} => r.body)
    );
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/api/v1/users/me';

  /**
   * Update my user details.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateUser$Response(params?: UpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return updateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Update my user details.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  updateUser(params?: UpdateUser$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.updateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `getUsers()` */
  static readonly GetUsersPath = '/api/v1/users';

  /**
   * Retrieve searched users except me.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Response(params?: GetUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
}>> {
    return getUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve searched users except me.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers(params?: GetUsers$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
}> {
    return this.getUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
} => r.body)
    );
  }

  /** Path part for operation `getBlockedUsers()` */
  static readonly GetBlockedUsersPath = '/api/v1/users/blocked';

  /**
   * Retrieve blocked users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBlockedUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBlockedUsers$Response(params?: GetBlockedUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
}>> {
    return getBlockedUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve blocked users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBlockedUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBlockedUsers(params?: GetBlockedUsers$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
}> {
    return this.getBlockedUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: Array<UserResponse>;
} => r.body)
    );
  }

}
