/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewContact } from '../fn/user-contacts-controller/add-new-contact';
import { AddNewContact$Params } from '../fn/user-contacts-controller/add-new-contact';
import { blockContact } from '../fn/user-contacts-controller/block-contact';
import { BlockContact$Params } from '../fn/user-contacts-controller/block-contact';
import { BooleanResponse } from '../models/boolean-response';
import { pinContact } from '../fn/user-contacts-controller/pin-contact';
import { PinContact$Params } from '../fn/user-contacts-controller/pin-contact';
import { StringResponse } from '../models/string-response';
import { unblockContact } from '../fn/user-contacts-controller/unblock-contact';
import { UnblockContact$Params } from '../fn/user-contacts-controller/unblock-contact';
import { unpinContact } from '../fn/user-contacts-controller/unpin-contact';
import { UnpinContact$Params } from '../fn/user-contacts-controller/unpin-contact';
import { updateContact } from '../fn/user-contacts-controller/update-contact';
import { UpdateContact$Params } from '../fn/user-contacts-controller/update-contact';


/**
 * CRUD Rest APIs for managing user contacts
 */
@Injectable({ providedIn: 'root' })
export class UserContactsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addNewContact()` */
  static readonly AddNewContactPath = '/api/v1/user-contacts';

  /**
   * Create a new user contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewContact()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewContact$Response(params: AddNewContact$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
}>> {
    return addNewContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new user contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewContact$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewContact(params: AddNewContact$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
}> {
    return this.addNewContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: StringResponse;
} => r.body)
    );
  }

  /** Path part for operation `updateContact()` */
  static readonly UpdateContactPath = '/api/v1/user-contacts/{user-id}/update-contact';

  /**
   * Update contact details.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateContact()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContact$Response(params: UpdateContact$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return updateContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Update contact details.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateContact$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContact(params: UpdateContact$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.updateContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `unpinContact()` */
  static readonly UnpinContactPath = '/api/v1/user-contacts/{user-id}/unpin-contact';

  /**
   * Unpin an existing contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unpinContact()` instead.
   *
   * This method doesn't expect any request body.
   */
  unpinContact$Response(params: UnpinContact$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return unpinContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Unpin an existing contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unpinContact$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unpinContact(params: UnpinContact$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.unpinContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `unblockContact()` */
  static readonly UnblockContactPath = '/api/v1/user-contacts/{user-id}/unblock-contact';

  /**
   * Unblock an existing contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unblockContact()` instead.
   *
   * This method doesn't expect any request body.
   */
  unblockContact$Response(params: UnblockContact$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return unblockContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Unblock an existing contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unblockContact$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unblockContact(params: UnblockContact$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.unblockContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `pinContact()` */
  static readonly PinContactPath = '/api/v1/user-contacts/{user-id}/pin-contact';

  /**
   * Pin an existing contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pinContact()` instead.
   *
   * This method doesn't expect any request body.
   */
  pinContact$Response(params: PinContact$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return pinContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Pin an existing contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pinContact$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pinContact(params: PinContact$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.pinContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `blockContact()` */
  static readonly BlockContactPath = '/api/v1/user-contacts/{user-id}/block-contact';

  /**
   * Block an existing contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `blockContact()` instead.
   *
   * This method doesn't expect any request body.
   */
  blockContact$Response(params: BlockContact$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>> {
    return blockContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Block an existing contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `blockContact$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  blockContact(params: BlockContact$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}> {
    return this.blockContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: string;

/**
 * Status code of the response
 */
'statusCode'?: string;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

}
