/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { createStory } from '../fn/user-stories-controller/create-story';
import { CreateStory$Params } from '../fn/user-stories-controller/create-story';
import { deleteStory } from '../fn/user-stories-controller/delete-story';
import { DeleteStory$Params } from '../fn/user-stories-controller/delete-story';
import { getMyContactsStories } from '../fn/user-stories-controller/get-my-contacts-stories';
import { GetMyContactsStories$Params } from '../fn/user-stories-controller/get-my-contacts-stories';
import { getMyStories } from '../fn/user-stories-controller/get-my-stories';
import { GetMyStories$Params } from '../fn/user-stories-controller/get-my-stories';
import { StoryDetailsResponse } from '../models/story-details-response';
import { StringResponse } from '../models/string-response';
import { updateStory } from '../fn/user-stories-controller/update-story';
import { UpdateStory$Params } from '../fn/user-stories-controller/update-story';
import { UserStoriesListResponse } from '../models/user-stories-list-response';


/**
 * CRUD Rest APIs for managing user-stories
 */
@Injectable({ providedIn: 'root' })
export class UserStoriesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createStory()` */
  static readonly CreateStoryPath = '/api/v1/user-stories';

  /**
   * Add new story.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStory$Response(params: CreateStory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StringResponse>>> {
    return createStory(this.http, this.rootUrl, params, context);
  }

  /**
   * Add new story.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStory(params: CreateStory$Params, context?: HttpContext): Observable<Array<StringResponse>> {
    return this.createStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StringResponse>>): Array<StringResponse> => r.body)
    );
  }

  /** Path part for operation `deleteStory()` */
  static readonly DeleteStoryPath = '/api/v1/user-stories/{user-story-id}';

  /**
   * Delete an existing user story.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStory()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStory$Response(params: DeleteStory$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResponse>> {
    return deleteStory(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete an existing user story.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStory(params: DeleteStory$Params, context?: HttpContext): Observable<BooleanResponse> {
    return this.deleteStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResponse>): BooleanResponse => r.body)
    );
  }

  /** Path part for operation `updateStory()` */
  static readonly UpdateStoryPath = '/api/v1/user-stories/{user-story-id}';

  /**
   * Update story content.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStory$Response(params: UpdateStory$Params, context?: HttpContext): Observable<StrictHttpResponse<BooleanResponse>> {
    return updateStory(this.http, this.rootUrl, params, context);
  }

  /**
   * Update story content.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStory(params: UpdateStory$Params, context?: HttpContext): Observable<BooleanResponse> {
    return this.updateStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<BooleanResponse>): BooleanResponse => r.body)
    );
  }

  /** Path part for operation `getMyStories()` */
  static readonly GetMyStoriesPath = '/api/v1/user-stories/me';

  /**
   * Retrieve my stories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyStories()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyStories$Response(params?: GetMyStories$Params, context?: HttpContext): Observable<StrictHttpResponse<UserStoriesListResponse>> {
    return getMyStories(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve my stories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyStories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyStories(params?: GetMyStories$Params, context?: HttpContext): Observable<UserStoriesListResponse> {
    return this.getMyStories$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserStoriesListResponse>): UserStoriesListResponse => r.body)
    );
  }

  /** Path part for operation `getMyContactsStories()` */
  static readonly GetMyContactsStoriesPath = '/api/v1/user-stories/contacts';

  /**
   * Retrieve my contacts stories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyContactsStories()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyContactsStories$Response(params?: GetMyContactsStories$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: Array<StoryDetailsResponse>;
}>> {
    return getMyContactsStories(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve my contacts stories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyContactsStories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyContactsStories(params?: GetMyContactsStories$Params, context?: HttpContext): Observable<{
[key: string]: Array<StoryDetailsResponse>;
}> {
    return this.getMyContactsStories$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: Array<StoryDetailsResponse>;
}>): {
[key: string]: Array<StoryDetailsResponse>;
} => r.body)
    );
  }

}
