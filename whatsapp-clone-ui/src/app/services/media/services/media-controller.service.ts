/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BooleanResponse } from '../models/boolean-response';
import { deleteMedia } from '../fn/media-controller/delete-media';
import { DeleteMedia$Params } from '../fn/media-controller/delete-media';
import { getMediaListReferences } from '../fn/media-controller/get-media-list-references';
import { GetMediaListReferences$Params } from '../fn/media-controller/get-media-list-references';
import { getMediaView } from '../fn/media-controller/get-media-view';
import { GetMediaView$Params } from '../fn/media-controller/get-media-view';
import { MediaReferenceListResponse } from '../models/media-reference-list-response';
import { uploadMedia } from '../fn/media-controller/upload-media';
import { UploadMedia$Params } from '../fn/media-controller/upload-media';


/**
 * CRUD Rest APIs for managing media files
 */
@Injectable({ providedIn: 'root' })
export class MediaControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadMedia()` */
  static readonly UploadMediaPath = '/api/v1/media';

  /**
   * Upload media file.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadMedia()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia$Response(params: UploadMedia$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
}>> {
    return uploadMedia(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload media file.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadMedia$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia(params: UploadMedia$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
}> {
    return this.uploadMedia$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
} => r.body)
    );
  }

  /** Path part for operation `getMediaView()` */
  static readonly GetMediaViewPath = '/api/v1/media/{reference}';

  /**
   * View media file.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMediaView()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMediaView$Response(params: GetMediaView$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getMediaView(this.http, this.rootUrl, params, context);
  }

  /**
   * View media file.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMediaView$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMediaView(params: GetMediaView$Params, context?: HttpContext): Observable<Blob> {
    return this.getMediaView$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `deleteMedia()` */
  static readonly DeleteMediaPath = '/api/v1/media/{reference}';

  /**
   * Delete media file.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMedia()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMedia$Response(params: DeleteMedia$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: BooleanResponse;
}>> {
    return deleteMedia(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete media file.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMedia$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMedia(params: DeleteMedia$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: BooleanResponse;
}> {
    return this.deleteMedia$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: BooleanResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: BooleanResponse;
} => r.body)
    );
  }

  /** Path part for operation `getMediaListReferences()` */
  static readonly GetMediaListReferencesPath = '/api/v1/media/list/{entityId}';

  /**
   * Retrieve entity related media references.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMediaListReferences()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMediaListReferences$Response(params: GetMediaListReferences$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
}>> {
    return getMediaListReferences(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve entity related media references.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMediaListReferences$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMediaListReferences(params: GetMediaListReferences$Params, context?: HttpContext): Observable<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
}> {
    return this.getMediaListReferences$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
}>): {
'headers'?: {

/**
 * Unique request identifier
 */
'requestId'?: any;

/**
 * Status code of the response
 */
'statusCode'?: any;
};
'body'?: MediaReferenceListResponse;
} => r.body)
    );
  }

}
